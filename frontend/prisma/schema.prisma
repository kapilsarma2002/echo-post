generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  clerkId      String        @unique
  email        String        @unique
  name         String?
  avatarUrl    String?
  accounts     Account[]
  posts        Post[]
  subscription Subscription?
  usage        Usage?
  settings     Settings?

  @@index([email])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  platform          Platform
  providerAccountId String   @unique
  accessToken       String? // Token for posting (expires)
  refreshToken      String? // For renewing access
  expiresAt         Int?
  accountName       String?
  isActive          Boolean  @default(true)

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          String     @id @default(cuid())
  userId      String
  title       String
  content     String?
  platform    Platform
  imageUrl    String?
  scheduledAt DateTime
  status      PostStatus @default(DRAFT)

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id                   String  @id @default(cuid())
  userId               String  @unique
  darkMode             Boolean @default(false)
  emailNotifications   Boolean @default(true)
  pushNotifications    Boolean @default(true)
  defaultPlatform      Platform?
  autoPostToConnected  Boolean @default(false)
  language             String  @default("en")

  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String             @id @default(cuid())
  userId    String             @unique
  plan      Plan
  stripeId  String? // Stripe subscription ID
  status    SubscriptionStatus @default(ACTIVE)
  expiresAt DateTime?

  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Usage {
  id           String   @id @default(cuid())
  userId       String   @unique
  postCount    Int      @default(0)
  apiCalls     Int      @default(0)
  accountCount Int      @default(0)
  resetAt      DateTime // When the limits reset (monthly)

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analytics {
  id            String   @id @default(cuid())
  postId        String
  impressions   Int      @default(0)
  engagements   Int      @default(0)
  clicks        Int      @default(0)
  shares        Int      @default(0)
  recordedAt    DateTime @default(now())
}

model Notification {
  id          String             @id @default(cuid())
  userId      String
  message     String
  type        NotificationType
  read        Boolean            @default(false)
  createdAt   DateTime           @default(now())
  link        String?
}

enum Platform {
  TWITTER
  INSTAGRAM
  LINKEDIN
  FACEBOOK
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum Plan {
  FREE
  PRO
  AGENCY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
}

enum NotificationType {
  SYSTEM
  POST_PUBLISHED
  POST_FAILED
  ACCOUNT_CONNECTED
  SUBSCRIPTION
}